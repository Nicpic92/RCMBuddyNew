This document provides a complete and updated overview of the "RCM Buddy" web application's current state, architecture, file structure, key code components, database setup, and deployment steps using Netlify, GitHub, and Neon (PostgreSQL). It also includes a summary of issues encountered and their resolutions during recent development.

Project Goal
To provide a web application named "RCM Buddy" focused on Excel file manipulation, data validation, and process automation. Key features include:

User Management: Secure user registration and login, with role-based access.
Multi-Company Support: Allows multiple companies to use the application, with strict data isolation ensuring each company can only access its own data. Multiple users can belong to the same company.
File Management: Users can securely upload, store, list, download, and delete general Excel files and other documents directly within the company_files table in the Neon (PostgreSQL) database.
Data Dictionary Builder: A tool allowing users to upload Excel/CSV files, extract headers, and define custom validation rules for headers from each individual sheet within the uploaded file. Users can navigate between sheets using a dropdown, define rules for each, and save these structured data dictionaries (named for the file and specific sheet, e.g., "My Report - Sheet1") to a separate dedicated database table (data_dictionaries). The original uploaded file is not stored on the server for this process. It also filters out already defined headers when building new dictionaries and allows for editing and printing existing data dictionaries.
Data Validation Tool: An interactive client-side tool to analyze Excel/CSV files for data quality issues. This tool now exclusively applies custom validation rules from saved data dictionaries (from the data_dictionaries table) and checks for duplicate rows. Standard checks for blank cells, "NULL" strings, and future dates are no longer performed by this tool's primary logic.
Clean Data Tool: A client-side tool for basic Excel data cleaning (duplicates, trimming, case standardization).
Lag Report Dashboard: A new client-side tool designed to upload a "Lag Detail Report" (Excel/CSV) and display its data in a dashboard format directly within the application. This tool does not use a backend function for processing.
Deployment: Automated deployment via Netlify, leveraging Netlify Functions for backend logic where applicable.
Version Control: GitHub.
Core Technologies Used
Frontend: HTML, CSS (Tailwind CSS for elements, custom CSS for others), JavaScript
Backend: Node.js (running as Netlify Functions, used for authentication, general file management, and data dictionary persistence; not for Lag Report Dashboard processing)
Database: Neon (PostgreSQL)
Deployment Platform: Netlify
Version Control: GitHub
Authentication: JSON Web Tokens (JWT) for secure, stateless user sessions.
Password Hashing: bcryptjs.
File Upload Parsing: busboy (Node.js library for multipart/form-data, backend).
Excel Processing (Client-side): xlsx.full.min.js (for Validation Engine analysis, Data Dictionary Builder header extraction and report generation, multi-sheet parsing, and Lag Report Dashboard display).
Excel Processing (Backend): exceljs (for Data Cleaner processing).
PostgreSQL Client: pg (Node.js library for database interaction).
Current Project File Structure
rcm-buddy-app/
├── public/                                     <-- Static frontend files
│   ├── index.html                              <-- Login/Registration page
│   ├── dashboard.html                          <-- User dashboard with quick tool access
│   ├── tools.html                              <-- List of all tools (secondary access)
│   ├── file-manager.html                       <-- General file upload and listing page
│   ├── js/                                     <-- Frontend JavaScript files
│   │   ├── login.js                            <-- Client-side login logic
│   │   ├── auth.js                             <-- Client-side authentication utilities
│   │   ├── dashboard.js                        <-- Client-side dashboard display logic
│   │   └── tools.js                            <-- Client-side 'All Tools' display logic
│   └── tools/                                  <-- Sub-directory for individual tool pages
│       ├── data-cleaner.html                   <-- Data Cleaner UI
│       ├── validation-engine.html              <-- REVISED: Validation Engine UI (now self-contained HTML with embedded CSS & JS)
│       ├── data-dictionary-builder.html        <-- Data Dictionary Builder UI
│       ├── data-dictionary-builder.css         <-- Data Dictionary Builder custom CSS
│       ├── data-dictionary-builder.js          <-- Data Dictionary Builder client-side logic
│       └── lag-report-validation.html          <-- NEW: Lag Report Dashboard UI (client-side)
├── netlify/                                    <-- Netlify Functions directory
│   └── functions/
│       ├── package.json                        <-- Function dependencies
│       ├── register.js                         <-- User/Company registration logic
│       ├── login.js                            <-- User login logic (Backend)
│       ├── verify-token.js                     <-- JWT verification for protected routes (formerly protected.js)
│       ├── db.js                               <-- Centralized database client pool
│       ├── get-company-tools.js                <-- Fetches tools accessible to a company for dashboard
│       ├── get-accessible-tools.js             <-- Fetches tools accessible to a user/company for 'All Tools' page
│       ├── upload-file.js                      <-- Handles general file upload to company_files DB
│       ├── list-files.js                       <-- Lists general files from company_files DB
│       ├── get-file.js                         <-- Retrieves general file data from company_files DB
│       ├── delete-file.js                      <-- Deletes general file from company_files DB
│       ├── clean-excel.js                      <-- Backend for Data Cleaner tool
│       ├── save-data-dictionary.js             <-- Saves structured data dictionary to data_dictionaries DB
│       ├── list-data-dictionaries.js           <-- Lists data dictionaries from data_dictionaries DB
│       ├── get-data-dictionary.js              <-- Retrieves specific data dictionary from data_dictionaries DB
│       └── delete-data-dictionary.js           <-- Deletes data dictionary from data_dictionaries DB
├── netlify.toml                                <-- Netlify build configuration
└── .gitignore                                  <-- Git ignore rules
Database Schema
The application uses a PostgreSQL database (Neon) with the following tables, using UUIDs for primary and foreign keys where applicable to ensure uniqueness across distributed systems:

companies table: Stores information about each client company.
SQL

CREATE TABLE companies (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(), -- Changed to UUID
    name VARCHAR(255) UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
users table: Stores user credentials and links to their company.
SQL

CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(), -- Changed to UUID
    username VARCHAR(255) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    role VARCHAR(50) NOT NULL DEFAULT 'user',
    company_id UUID NOT NULL REFERENCES companies(id) ON DELETE RESTRICT, -- Changed to UUID
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
tools table: Defines the available tools in the application.
SQL

CREATE TABLE tools (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    identifier VARCHAR(255) UNIQUE NOT NULL, -- e.g., 'file-manager', 'data-dictionary-builder'
    name VARCHAR(255) NOT NULL,
    description TEXT,
    icon_class VARCHAR(50), -- e.g., 'fas fa-folder-open'
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
company_tools table: Junction table linking companies to the tools they have access to.
SQL

CREATE TABLE company_tools (
    company_id UUID NOT NULL REFERENCES companies(id) ON DELETE CASCADE,
    tool_id UUID NOT NULL REFERENCES tools(id) ON DELETE CASCADE,
    assigned_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (company_id, tool_id)
);
user_tools table: Junction table linking individual users to specific tools (for granular permissions).
SQL

CREATE TABLE user_tools (
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    tool_id UUID NOT NULL REFERENCES tools(id) ON DELETE CASCADE,
    assigned_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, tool_id)
);
company_files table: Stores metadata and the binary data of general uploaded files, with strict company and user ownership.
SQL

CREATE TABLE company_files (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(), -- Changed to UUID
    company_id UUID NOT NULL REFERENCES companies(id) ON DELETE CASCADE, -- Changed to UUID
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE, -- Changed to UUID
    original_filename VARCHAR(255) NOT NULL,
    mimetype VARCHAR(100),
    size_bytes BIGINT,
    file_data BYTEA NOT NULL,
    uploaded_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
data_dictionaries table: Stores structured data dictionary definitions (validation rules).
SQL

CREATE TABLE data_dictionaries (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(), -- Changed to UUID
    company_id UUID NOT NULL REFERENCES companies(id) ON DELETE CASCADE, -- Changed to UUID
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE, -- Changed to UUID
    name VARCHAR(255) NOT NULL,
    rules_json JSONB NOT NULL,
    source_headers_json JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
ALTER TABLE data_dictionaries
ADD CONSTRAINT unique_company_dictionary_name UNIQUE (company_id, name);
Key Code Components & Their Roles
5.1. netlify.toml
The primary configuration for Netlify deployment, defining build directories, function paths, and API redirects.

Ini, TOML

[build]
  publish = "public"
  command = "npm install && cd netlify/functions && npm install && cd ../../"

[functions]
  directory = "netlify/functions"

[[redirects]]
  from = "/api/*"
  to = "/.netlify/functions/:splat"
  status = 200

[[plugins]]
package = "@netlify/plugin-functions-install-core"
5.2. Frontend Pages (public/ and public/tools/)
All frontend pages now consistently retrieve and remove the JWT token from localStorage using the key 'token'.

index.html: Login/Registration page. Handles user authentication and stores the JWT token as 'token' in localStorage.
dashboard.html: The primary user dashboard. Authenticates via JWT, displays user and company information, and provides quick access (tool cards) to the main application features.
tools.html: A secondary page listing all available tools. It provides a more comprehensive overview of tools, now styled as responsive cards for visual consistency with the dashboard. Crucially, the <script src="/js/tools.js"></script> tag has been moved to the very end of the <body> to ensure proper DOM loading before script execution.
file-manager.html: Handles uploading, listing, downloading, and deleting general files from the company_files table. Now includes a visual tag for files marked as "Data Dictionary."
tools/data-cleaner.html: Provides the UI for client-side Excel data cleaning.
tools/validation-engine.html: REVISED. This file is now self-contained, embedding its CSS and JavaScript directly. Client-side validation using xlsx.full.min.js. Loads dropdowns from the list-data-dictionaries.js API. Loads selected dictionary rules from the get-data-dictionary.js API. Core Validation Logic now performs only custom validation rules (from loaded dictionaries) and duplicate row detection. Limits processing to the first 5000 data rows.
tools/data-dictionary-builder.html: Provides UI for uploading Excel/CSV files, displaying extracted headers, and defining rules. Presents the data dictionary builder as a full-screen overlay/modal. Includes a close button and a sheet selection dropdown.
tools/data-dictionary-builder.css: Custom CSS for the Data Dictionary Builder, with new styles for the full-screen overlay and modal content.
tools/data-dictionary-builder.js: Handles client-side Excel/CSV parsing, dynamically builds the rule definition table, collects rules, sends data to save-data-dictionary.js. MAJOR UPDATE - Multi-Sheet Support: Now parses all sheets, stores headers and rules per sheet in memory, and appends currentSheetName to dictionary names. Prints defined rules and validates data across all sheets. The deleteDataDictionary function and its calls have been completely removed from this file.
tools/lag-report-validation.html: NEW Client-Side Tool. Provides UI for uploading a "Lag Detail Report" (Excel/CSV) and displaying its contents in an interactive dashboard table directly on the page.
5.3. Backend Functions (netlify/functions/)
package.json: Lists Node.js dependencies (bcryptjs, pg, jsonwebtoken, dotenv, busboy, exceljs).

register.js: Handles user and company registration.
login.js: Handles user login and JWT generation. Includes extensive debugging logs for event.body parsing.
verify-token.js: Verifies JWTs for protected routes (formerly protected.js). Returns user data (including username and company_name) from the decoded JWT payload.
db.js: Centralized utility for creating a PostgreSQL connection pool.
get-company-tools.js: Fetches tools assigned to a user's company (from company_tools table) for display on the dashboard. Includes aggressive debugging logs.
get-accessible-tools.js: Fetches tools accessible to a user's company (from company_tools table) for display on the 'All Tools' page. Includes debugging logs. The frontend tools.js now correctly calls this function at /.netlify/functions/get-accessible-tools.
upload-file.js: Handles general file uploads to the company_files table.
list-files.js: Lists general files from the company_files table, now including the is_data_dictionary flag.
get-file.js: Retrieves general file data (base64 encoded in JSON) from the company_files table.
delete-file.js: Deletes general files from the company_files table.
clean-excel.js: Backend logic for the Data Cleaner tool.
save-data-dictionary.js: Authenticated function to save (INSERT for new, UPDATE for existing) a structured data dictionary into the data_dictionaries table. Uses explicit SELECT before INSERT or UPDATE.
list-data-dictionaries.js: Authenticated function to list metadata and all rules (rules_json) of data dictionaries.
get-data-dictionary.js: Authenticated function to retrieve full rules and source headers for a specific data dictionary.
delete-data-dictionary.js: Deletes data dictionary from the data_dictionaries table (backend function remains, but UI button removed).
lag-report-validation.js: Removed from this directory as the "Lag Report Dashboard" tool is now entirely client-side.
5.4. Data Isolation Strategy (CRUCIAL)
Company ID in JWT: company_id is embedded in the JWT upon successful login.
Backend Enforcement: All backend functions that interact with company-specific data MUST verify the JWT, extract the company_id from the decoded JWT, and include a WHERE company_id = <extracted_company_id> clause in ALL database queries (SELECT, INSERT, UPDATE, DELETE) to ensure strict data isolation.
Netlify Deployment & Configuration
Environment Variables: DATABASE_URL (Neon PostgreSQL connection string) and JWT_SECRET (strong, random secret key). These must be set in Netlify Site Settings > Build & Deploy > Environment Variables, with "Functions" scope enabled.
Continuous Deployment: Netlify automatically deploys changes pushed to the configured GitHub branch.
Function Bundling: The @netlify/plugin-functions-install-core plugin handles Node.js dependency installation for functions.
Common Issues & Troubleshooting (Summary of Resolutions)
"Session expired. Please log in again." / localStorage token mismatch:
Resolution: Consistently updated all frontend HTML/JS files to use localStorage.getItem('token') and localStorage.removeItem('token') for all authentication-related localStorage operations.
ReferenceError: messageElement is not defined in login.js (frontend):
Resolution: Declared loginForm and messageElement with let or const at the top level of public/js/login.js to ensure they were in scope when handleLoginSubmit was called.
GET ... 404 (Not Found) for login.js (frontend):
Resolution: The public/js/login.js file was missing from the deployed static assets. This was fixed by ensuring the file was correctly placed in public/js/ locally, committed, and pushed to Git for Netlify deployment.
POST ... 400 (Bad Request) for login function (backend):
Resolution: This indicated the backend login function wasn't receiving username/password. Debugging confirmed frontend was sending it correctly, and increased logging in netlify/functions/login.js (e.g., logging event.body and parsed values) helped confirm correct parsing. The problem was usually resolved by ensuring credentials were being passed from the form inputs.
GET ... 404 (Not Found) for get-company-tools.js (dashboard) and get-accessible-tools.js (tools page):
Resolution: These errors were due to Netlify not recognizing the function files for deployment despite being present in the repository (0 new function(s) to upload in build logs). This required aggressive tactics like "Clear build cache and deploy site" combined with a "force push" (making a tiny, harmless change to the function file to ensure a new commit hash).
"Found 0 initial tool cards" / "Total shown: 0" on dashboard and tools page (frontend rendering):
Resolution: This critical issue was because document.querySelectorAll was executing too early in the JavaScript before the HTML tool card elements were parsed. The definitive fix involved moving the <script src="/js/tools.js"></script> tag (and a similar one for dashboard.js) from the <head> to the very end of the <body> in public/tools.html and public/dashboard.html respectively. This ensures the script runs after the DOM is ready.
"Hello, undefined" in navigation:
Resolution: Ensured verifyAndSetupUser correctly returned the nested user object (userData.user) and that profileLink.textContent was correctly accessing user.username (and company-display using user.company_name).
user_tools_tool_id_fkey violation:
Resolution: This occurred when assigning tools to users in the user_tools table due to malformed or incorrect tool_id UUIDs being used. The fix involved carefully re-querying the tools table to get the exact, correctly formatted UUIDs and using them in the INSERT statement for user_tools.
Upcoming Changes
The following enhancements are planned for the "RCM Buddy" application:

Data Dictionary Builder Enhancements: It will gain the capability to identify if headers are located on row 2 or row 3 of the sheet.
Company Name Display: The "Your Company" display will be dynamically populated with the actual company name provided during registration.
User Profile Page: A dedicated profile page will be built for users.
Admin Pages for Employee Registration: Administrative pages will be developed to allow company administrators to register their employees within the application.
